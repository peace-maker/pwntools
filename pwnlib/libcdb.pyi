from typing import overload, Callable, Mapping
from typing_extensions import Literal

HASHES: dict[str, Callable[[str], str]]
DEBUGINFOD_SERVERS: list[str]
NEGATIVE_CACHE_EXPIRY: int

def unstrip_libc(filename: str) -> bool: ...
def download_libraries(libc_path: str, unstrip: bool = ...) -> str | None: ...
@overload
def search_by_symbol_offsets(symbols: Mapping[str, int], select_index: int | None = None, unstrip: bool = True, return_as_list: Literal[False] = False) -> str | None: ...
@overload
def search_by_symbol_offsets(symbols: Mapping[str, int], select_index: int | None, unstrip: bool, return_as_list: Literal[True]) -> list[str] | None: ...
@overload
def search_by_symbol_offsets(symbols: Mapping[str, int], select_index: int | None, *, return_as_list: Literal[True]) -> list[str] | None: ...
@overload
def search_by_symbol_offsets(symbols: Mapping[str, int], unstrip: bool, *, return_as_list: Literal[True]) -> list[str] | None: ...
@overload
def search_by_symbol_offsets(symbols: Mapping[str, int], *, return_as_list: Literal[True]) -> list[str] | None: ...
@overload
def search_by_symbol_offsets(symbols: Mapping[str, int], select_index: int | None = None, unstrip: bool = True, return_as_list: bool = False) -> str | list[str] | None: ...
def search_by_build_id(hex_encoded_id: str, unstrip: bool = ...) -> str | None: ...
def search_by_md5(hex_encoded_id: str, unstrip: bool = ...) -> str | None: ...
def search_by_sha1(hex_encoded_id: str, unstrip: bool = ...) -> str | None: ...
def search_by_sha256(hex_encoded_id: str, unstrip: bool = ...) -> str | None: ...
def get_build_id_offsets() -> dict[str, list[int]]: ...