import threading
from collections import OrderedDict
from collections.abc import (
    ItemsView,
    Iterable,
    Iterator,
    KeysView,
    Sequence,
    ValuesView,
)
from typing import Any, AnyStr, Callable, TextIO, TypeVar
from typing_extensions import (
    deprecated,
    Literal,
    TypeAlias,
    ParamSpec,
    Protocol,
    SupportsInt,
)
from os import FileDescriptorOrPath, PathLike

from pwnlib.device import Device
from pwnlib.elf.elf import ELF
from pwnlib.tubes.ssh import ssh
from pwnlib.timeout import TimeoutValue
from pwnlib.log import ValidLoglevel

class _defaultdict(dict[str, Any]):
    default: dict[str, Any]

class _DictStack:
    _current: _defaultdict

    def __init__(self, default: dict[str, Any]) -> None: ...
    def push(self) -> None: ...
    def pop(self) -> None: ...
    def copy(self) -> _defaultdict: ...
    def __len__(self) -> int: ...
    def __delitem__(self, k: str) -> None: ...
    def __getitem__(self, k: str) -> Any: ...
    def __setitem__(self, k: str, v: Any) -> None: ...
    def __contains__(self, k: object) -> bool: ...
    def __iter__(self) -> Iterator[str]: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def keys(self) -> KeysView[str]: ...
    def values(self) -> ValuesView[Any]: ...
    def items(self) -> ItemsView[str, Any]: ...

class _Tls_DictStack(threading.local, _DictStack):
    pass

class Thread(threading.Thread):
    old: ContextType

_P = ParamSpec("_P")
_R = TypeVar("_R")

class SupportsStr(Protocol):
    def __str__(self) -> str: ...

class ContextType:
    defaults: dict[str, Any]

    oses: Sequence[str]
    architectures: OrderedDict[str, dict[str, Any]]
    endiannesses: OrderedDict[str, str]
    signednesses: dict[str, bool]
    valid_signed: Sequence[str]

    _tls: _Tls_DictStack

    class LocalContext:
        def __enter__(self) -> None: ...
        def __exit__(self, *args: Any, **kwargs: Any) -> None: ...
        def __call__(
            self, function: Callable[_P, _R], *args: _P.args, **kwargs: _P.kwargs
        ) -> Callable[_P, _R]: ...

    def __init__(self, **kwargs: Any) -> None: ...
    def copy(self) -> dict: ...
    def update(self, *args: Any, **kwargs: Any) -> None: ...
    def __repr__(self) -> str: ...
    def local(self, **kwargs: Any) -> ContextType.LocalContext: ...
    def silent(self) -> ContextType.LocalContext: ...
    def quiet(self) -> ContextType.LocalContext: ...
    def quietfunc(self, function: Callable[..., Any]) -> Callable[..., Any]: ...
    def verbose(self) -> ContextType.LocalContext: ...
    def clear(self, *args: Any, **kwargs: Any) -> None: ...
    @property
    def native(self) -> bool: ...
    @property
    def arch(self) -> str: ...
    @arch.setter
    def arch(self, arch: str) -> None: ...
    @arch.deleter
    def arch(self) -> None: ...
    @property
    def aslr(self) -> bool: ...
    @aslr.setter
    def aslr(self, aslr: Any) -> None: ...
    @aslr.deleter
    def aslr(self) -> None: ...
    @property
    def kernel(self) -> str: ...
    @kernel.setter
    def kernel(self, arch: str) -> None: ...
    @kernel.deleter
    def kernel(self) -> None: ...
    @property
    def bits(self) -> int: ...
    @bits.setter
    def bits(self, bits: SupportsInt) -> None: ...
    @bits.deleter
    def bits(self) -> None: ...
    @property
    def binary(self) -> ELF | None: ...
    @binary.setter
    def binary(self, binary: str | PathLike | ELF) -> None: ...
    @binary.deleter
    def binary(self) -> None: ...
    @property
    def bytes(self) -> int: ...
    @bytes.setter
    def bytes(self, value: int) -> None: ...
    @property
    def encoding(self) -> str: ...
    @encoding.setter
    def encoding(self, arch: str) -> None: ...
    @encoding.deleter
    def encoding(self) -> None: ...

    _ValidEndianesses: TypeAlias = Literal["big", "little", "be", "le", "eb", "el"]
    @property
    def endian(self) -> str: ...
    @endian.setter
    def endian(self, endianness: _ValidEndianesses) -> None: ...
    @endian.deleter
    def endian(self) -> None: ...
    @property
    def log_level(self) -> int: ...
    @log_level.setter
    def log_level(self, level: int | ValidLoglevel) -> None: ...
    @log_level.deleter
    def log_level(self) -> None: ...
    @property
    def log_file(self) -> TextIO: ...
    @log_file.setter
    def log_file(self, file: TextIO | str) -> None: ...
    @log_file.deleter
    def log_file(self) -> None: ...
    @property
    def log_console(self) -> TextIO: ...
    @log_console.setter
    def log_console(self, file: TextIO | str) -> None: ...
    @log_console.deleter
    def log_console(self) -> None: ...
    @property
    def local_libcdb(self) -> str: ...
    @local_libcdb.setter
    def local_libcdb(self, path: str) -> None: ...
    @local_libcdb.deleter
    def local_libcdb(self) -> None: ...
    @property
    def mask(self) -> int: ...

    _ValidOSes: TypeAlias = Literal[
        "linux", "freebsd", "windows", "cgc", "android", "baremetal", "darwin"
    ]
    @property
    def os(self) -> str: ...
    @os.setter
    def os(self, os: _ValidOSes) -> None: ...
    @os.deleter
    def os(self) -> None: ...
    @property
    def randomize(self) -> bool: ...
    @randomize.setter
    def randomize(self, randomize: Any) -> None: ...
    @randomize.deleter
    def randomize(self) -> None: ...

    _ValidSignedness: TypeAlias = Literal["signed", "unsigned", "yes", "no"]
    @property
    def signed(self) -> bool: ...
    @signed.setter
    def signed(self, signed: _ValidSignedness | bool) -> None: ...
    @signed.deleter
    def signed(self) -> None: ...
    @property
    def timeout(self) -> TimeoutValue: ...
    @timeout.setter
    def timeout(self, timeout: TimeoutValue) -> None: ...
    @timeout.deleter
    def timeout(self) -> None: ...
    @property
    def terminal(self) -> Sequence[str]: ...
    @terminal.setter
    def terminal(self, terminal: str | Sequence[str]) -> None: ...
    @terminal.deleter
    def terminal(self) -> None: ...
    @property
    def proxy(self) -> Iterable[str] | None: ...
    @proxy.setter
    def proxy(self, proxy: str | Iterable[str] | None) -> None: ...
    @proxy.deleter
    def proxy(self) -> None: ...
    @property
    def noptrace(self) -> bool: ...
    @noptrace.setter
    def noptrace(self, noptrace: Any) -> None: ...
    @noptrace.deleter
    def noptrace(self) -> None: ...
    @property
    def adb_host(self) -> str: ...
    @adb_host.setter
    def adb_host(self, adb_host: SupportsStr) -> None: ...
    @adb_host.deleter
    def adb_host(self) -> None: ...
    @property
    def adb_port(self) -> int: ...
    @adb_port.setter
    def adb_port(self, adb_port: SupportsInt) -> None: ...
    @adb_port.deleter
    def adb_port(self) -> None: ...
    @property
    def device(self) -> str | None: ...
    @device.setter
    def device(self, device: AnyStr | Device | None) -> None: ...
    @device.deleter
    def device(self) -> None: ...
    @property
    def adb(self) -> list[str]: ...
    @property
    def buffer_size(self) -> int: ...
    @buffer_size.setter
    def buffer_size(self, buffer_size: SupportsInt) -> None: ...
    @buffer_size.deleter
    def buffer_size(self) -> None: ...
    @property
    def cache_dir_base(self) -> str: ...
    @cache_dir_base.setter
    def cache_dir_base(self, cache_dir_base: FileDescriptorOrPath) -> None: ...
    @cache_dir_base.deleter
    def cache_dir_base(self) -> None: ...
    @property
    def cache_dir(self) -> str | None: ...
    @property
    def delete_corefiles(self) -> bool: ...
    @delete_corefiles.setter
    def delete_corefiles(self, v: Any) -> None: ...
    @delete_corefiles.deleter
    def delete_corefiles(self) -> None: ...
    @property
    def rename_corefiles(self) -> bool: ...
    @rename_corefiles.setter
    def rename_corefiles(self, v: Any) -> None: ...
    @rename_corefiles.deleter
    def rename_corefiles(self) -> None: ...
    @property
    def newline(self) -> bytes: ...
    @newline.setter
    def newline(self, newline: AnyStr) -> None: ...
    @newline.deleter
    def newline(self) -> None: ...
    @property
    def gdbinit(self) -> str: ...
    @gdbinit.setter
    def gdbinit(self, gdbinit: SupportsStr) -> None: ...
    @gdbinit.deleter
    def gdbinit(self) -> None: ...
    @property
    def cyclic_alphabet(self) -> bytes: ...
    @cyclic_alphabet.setter
    def cyclic_alphabet(self, cyclic_alphabet: str) -> None: ...
    @cyclic_alphabet.deleter
    def cyclic_alphabet(self) -> None: ...
    @property
    def cyclic_size(self) -> int: ...
    @cyclic_size.setter
    def cyclic_size(self, cyclic_size: SupportsInt) -> None: ...
    @cyclic_size.deleter
    def cyclic_size(self) -> None: ...
    @property
    def ssh_session(self) -> ssh | None: ...
    @ssh_session.setter
    def ssh_session(self, ssh_session: ssh) -> None: ...
    @ssh_session.deleter
    def ssh_session(self) -> None: ...
    def __call__(self, **kwargs: Any) -> None: ...
    @deprecated("Use context.clear()")
    def reset_local(self) -> None: ...
    @property
    def endianness(self) -> str: ...
    @endianness.setter
    def endianness(self, endianness: _ValidEndianesses) -> None: ...
    @property
    def sign(self) -> bool: ...
    @sign.setter
    def sign(self, sign: _ValidSignedness | bool) -> None: ...
    @property
    def signedness(self) -> bool: ...
    @signedness.setter
    def signedness(self, signedness: _ValidSignedness | bool) -> None: ...
    @property
    def word_size(self) -> int: ...
    @word_size.setter
    def word_size(self, word_size: SupportsInt) -> None: ...

    Thread: TypeAlias = Thread

context: ContextType

# TODO: Concatenate the _P parameters with all ContextType properties in the returned callable
def LocalContext(function: Callable[_P, _R]) -> Callable[_P, _R]: ...
def LocalNoarchContext(function: Callable[_P, _R]) -> Callable[_P, _R]: ...
