from collections.abc import ByteString, Generator, Sequence
from typing import AnyStr
from typing_extensions import Literal

from pwnlib.context import LocalNoarchContext

def de_bruijn(alphabet: ByteString | None = ..., n: int | None = ...) -> Generator[int, None, None]: ...
def cyclic(length: int | None = ..., alphabet: ByteString | None = ..., n: int | None = ...) -> bytes: ...
@LocalNoarchContext
def cyclic_find(subseq: AnyStr | bytearray | int, alphabet: ByteString | None = ..., n: int | None = ...) -> int: ...
def metasploit_pattern(sets: Sequence[str] = ...) -> Generator[int, None, None]: ...
def cyclic_metasploit(length: int | None = ..., sets: Sequence[str] = ...) -> bytes: ...
def cyclic_metasploit_find(subseq: ByteString | int, sets: Sequence[str] = ...) -> int: ...

class cyclic_gen:
    def __init__(self, alphabet: ByteString | None = ..., n: int | None = ...) -> None: ...
    def get(self, length: int | None = ...) -> bytes: ...
    def find(self, subseq: AnyStr | bytearray | int) -> tuple[int, int, int] | Literal[-1]: ...